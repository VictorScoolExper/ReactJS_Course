Side Effects, Async Tasks & Redux

Reducers must be pure, side-effect free, synchronous functions
Input(Old State + Action) -> Output (New State)
Question: Where should side-effects and async tasks be executed?
- 1 - Inside the components (e.g. useEffect())
- 2 - Inside the action creators

NEVER CHANGE REDUX STATE OUTSIDE REDUCER

Fat Reducers vs Fat Components vs Fat Actions
Where should our logic (code) go?
- Synchronous, side-effect free code (i.e. data transformation)
    - Prefer Reducers
    - Avoid Action Creators or Components
- Async code or code with side-effects
    - Prefer Action Creators or Components
    - Never use Reducers

What is a "Thunk"?
- A function that delays an action until later
    - An action creator function that does NOT return the action itself but another function
      which eventually returns the action.

